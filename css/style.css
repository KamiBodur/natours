/*
COLORS:

Light green: #7ed56f
Medium green: #55c57a
Dark green: #28b485

*/

* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

body {
    font-family: "Lato", sans-serif;
    font-weight: 400;
    font-size: 16px;
    line-height: 1.7;
    color: #777;
    padding: 30px;
}

.header {
    height: 95vh;
    background-image: linear-gradient(
        to right bottom,
         rgba(126, 213, 111, 0.808),
         rgba(40, 180, 133, 0.808)),
         url(../img/hero.jpg);
    background-size: cover;
    background-position: top;
    /* .logo-box is positioned absolutely in relation to his first ancestor with declared position - .header with postion: relative; */
    position: relative;

    clip-path: polygon(0 0, 100% 0, 100% 75%, 0 100%);
}

.logo-box {
    /* check postion of .header and see comment */
    position: absolute;
    top: 40px;
    left: 40px;
}

.logo {
    /* width is automatically figured out - preferance to control the height of an element */
    height: 35px;
}

.text-box {
    position: absolute;
    /* top and left specify the distance from the top and left side of the ancestor(parent) and the left corner of a .text-box div is in a center of the browser window (you can add bacgorund-color to see it clearly) */
    /* top: 40% cause it looks better vertically */
    top: 40%;
    left: 50%;
    /* it is postioned in relation to itself */
    transform: translate(-50%, -50%);
    /* this will center the button .btn beacause it is an ilnine-block elemenet whchis is treated like a text */
    text-align: center;
}

.heading-primary {
    color: #fff;
    text-transform: uppercase;
/* in case the animation is shaking at the end - but it was not happening in my browser */
    backface-visibility: hidden;
    margin-bottom: 60px;
}

.heading-primary-main {
    display: block;
    font-size: 60px;
    font-weight: 400;
    letter-spacing: 35px;

    animation-name: moveInLeft;
    animation-duration: 1.5s;
    animation-timing-function: ease-out;
}

.heading-primary-sub {
    display: block;
    font-size: 20px;
    font-weight: 700;
    letter-spacing: 17.4px;

    animation-name: moveInRight;
    animation-duration: 1.5s;
    animation-timing-function: ease-out;
}

@keyframes moveInLeft {
    0% {
        opacity: 0;
        transform: translateX(-100px);
    }
    /* at this stage we create little bump/jump */
    80% {
        transform: translateX(10px);
    }
    100% {
        opacity: 1;
        /* it will make heading look like before animation */
        transform: translateX(0);
    }
}

@keyframes moveInRight {
    0% {
        opacity: 0;
        transform: translateX(100px);
    }
    /* at this stage we create little bump/jump */
    80% {
        transform: translateX(-10px);
    }
    100% {
        opacity: 1;
        /* it will make heading look like before animation */
        transform: translateX(0);
    }
}

@keyframes moveInBottom {
    0% {
        opacity: 0;
        transform: translateY(100px);
    }

    100% {
        opacity: 1;
        /* it will make heading look like before animation */
        transform: translateY(0);
    }
}

.btn:link,
.btn:visited {
    display: inline-block;
    text-transform: uppercase;
    text-decoration: none;
    padding: 15px 40px;
    border-radius: 100px;
    transition: all .2s;
    position: relative;
}

.btn:hover {
    /* Y axis moves from the top to bottom so we need negative value */
    transform: translateY(-3px);
    box-shadow: 0 10px 20px rgba(0,0,0,.2);
}

.btn:active {
    /* it is in relation to initail link state */
    transform: translateY(-1px);
    /* values of the Y axis and blur are twice smaller then on :hever - from experience it works good */
    box-shadow: 0 5px 10px rgba(0,0,0,.2);
}

.btn-white {
    background-color: #fff;
    color: #777;
}

.btn::after {
    /* ::after will work only when you add content prop. and we want it to behave like our button so it has to have display prop. of inline-block */
    /* .btn::after is treated like a child of the .btn */
    content: "";
    display: inline-block;
    height: 100%;
    width: 100%;
    border-radius: 100px;
    /* to put it behind actual button use absolute positioning and add reference to closest ancestor and add z-index */
    position: absolute;
    top: 0;
    left: 0;
    z-index: -1;
    transition: all .4s;
}

.btn-white::after {
    background-color: #fff;
}
/* this ::after will work only when we hovered over the button */
.btn:hover::after {
    transform: scaleX(1.4) scaleY(1.6);
    opacity: 0;
}

.btn-animated {
    animation: moveInBottom .5s ease-out .75s;
    /* applies the 0% animation before it stars - The element will get the style values that is set by the first keyframe (depends on animation-direction), and retain this during the animation-delay period  */
    animation-fill-mode: backwards;
}